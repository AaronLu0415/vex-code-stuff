{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ninertial_3 = Inertial(Ports.PORT3)\nmotor_1 = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nmotor_2 = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\ncontroller_output = 0\nerror = 0\np_current = 0\nMax_speed = 0\nMin_speed = 0\ndirection = 0\ncorrection = 0\nmovement_speed = 0\n\ndef gyro_straight_sec_seconds(gyro_straight_sec_seconds__sec):\n    global controller_output, error, p_current, Max_speed, Min_speed, direction, correction, movement_speed\n    brain.timer.clear()\n    direction = inertial_3.orientation(YAW, DEGREES)\n    while not brain.timer.time(SECONDS) == gyro_straight_sec_seconds__sec:\n        correction = inertial_3.orientation(YAW, DEGREES) - direction\n        motor_1.set_velocity((movement_speed - correction), PERCENT)\n        motor_2.set_velocity((movement_speed + correction), PERCENT)\n        motor_1.spin(FORWARD)\n        motor_2.spin(FORWARD)\n        wait(5, MSEC)\n    motor_1.stop()\n    motor_2.stop()\n\ndef Turn_Deg_Degrees_(Turn_Deg_Degrees___Deg, Turn_Deg_Degrees___Degrees_):\n    global controller_output, error, p_current, Max_speed, Min_speed, direction, correction, movement_speed\n    inertial_3.calibrate()\n    while inertial_3.is_calibrating():\n        sleep(50)\n    error = Turn_Deg_Degrees___Deg - inertial_3.orientation(YAW, DEGREES)\n    while not error == 0:\n        error = Turn_Deg_Degrees___Deg - inertial_3.orientation(YAW, DEGREES)\n        controller_output = error * p_current\n        if math.fabs(controller_output) > Max_speed:\n            controller_output = Max_speed * (Turn_Deg_Degrees___Degrees_ / math.fabs(Turn_Deg_Degrees___Degrees_))\n        if math.fabs(controller_output) < Min_speed:\n            controller_output = Min_speed * (Turn_Deg_Degrees___Degrees_ / math.fabs(Turn_Deg_Degrees___Degrees_))\n        motor_1.set_velocity(controller_output, PERCENT)\n        motor_2.set_velocity((controller_output * -1), PERCENT)\n        motor_1.spin(FORWARD)\n        motor_2.spin(FORWARD)\n        wait(5, MSEC)\n    motor_1.stop()\n    motor_2.stop()\n\ndef when_started1():\n    global controller_output, error, p_current, Max_speed, Min_speed, direction, correction, movement_speed\n    Min_speed = 0\n    Max_speed = 0\n    p_current = 0\n    movement_speed = 0\n\nwhen_started1()\n","textLanguage":"python","robotConfig":[{"port":[3],"name":"inertial_3","customName":false,"deviceType":"Inertial","deviceClass":"inertial","setting":{},"triportSourcePort":22},{"port":[1],"name":"motor_1","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[2],"name":"motor_2","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.5","minVersion":"3.1.0","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}